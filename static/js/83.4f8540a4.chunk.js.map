{"version":3,"file":"static/js/83.4f8540a4.chunk.js","mappings":"mSAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+GCDVE,EAAUF,EAAAA,GAAAA,IAAH,gFAMPG,EAAcH,EAAAA,GAAAA,IAAH,0GAOXI,EAAaJ,EAAAA,GAAAA,GAAH,wDAKVK,EAAcL,EAAAA,GAAAA,GAAH,gDAIXM,EAAWN,EAAAA,GAAAA,GAAH,oG,iBC2BrB,EAzCkB,SAAC,GAAe,IAAbO,EAAY,EAAZA,MACXC,EAAgED,EAAhEC,eAAgBC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,SAAUC,EAAWL,EAAXK,OAE7D,OACE,iCACE,UAACV,EAAD,YACE,gBACEW,IACEJ,EAAW,yCAC2BA,GAClCK,EAENC,IAAI,SACJC,MAAO,IACPC,OAAQ,OAEV,UAACd,EAAD,YACE,wBAAKK,KACL,oCAAYU,KAAKC,MAAqB,GAAfT,GAAvB,QACA,sCACA,uBAAIC,KACJ,oCACA,SAACP,EAAD,UACGQ,EAAOQ,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACV,wBAAcD,GAALC,EADC,aAMlB,UAACjB,EAAD,YACE,SAACC,EAAD,WACE,SAAC,KAAD,CAAMiB,GAAG,OAAT,qBAEF,SAACjB,EAAD,WACE,SAAC,KAAD,CAAMiB,GAAG,UAAT,4BAKT,E,iBCED,EA1CqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOjB,EAAP,KAAckB,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,iBAACH,QAAD,IAACA,GAAD,UAACA,EAAUI,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,KAC5CC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAIA,IAAMG,EAAa,IAAIC,gBAEjBC,EAAY,mCAAG,8GAEGC,EAAAA,EAAAA,GAAU,UAAD,OAAWN,GAAWG,GAFlC,OAEX5B,EAFW,OAGjBkB,EAASlB,GAHQ,gDAKE,iBAAf,KAAMgC,MACRC,EAAAA,GAAAA,MAAY,kCANG,yDAAH,qDAYlB,OADAH,IACO,kBAAMF,EAAWM,OAAjB,CAhBN,CAiBF,GAAE,CAACT,KAGF,iCACE,UAACjC,EAAD,CAAYwB,GAAIK,EAAYc,QAA5B,WACE,SAAC,MAAD,IADF,aAICnC,IAAS,SAAC,EAAD,CAAWA,MAAOA,KAC5B,SAAC,EAAAoC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C,8FC/CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMR,EAAS,mCAAG,WAAOS,EAAMZ,GAAb,uFACAW,EAAAA,EAAAA,IAAUC,EAAM,CACrCC,OAAQb,EAAWa,SAFE,cACjBC,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,uD","sources":["pages/MovieDetails/MovieDetails.styled.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails/MovieDetails.jsx","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const WrapperInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 10px;\n`;\n\nexport const GenresList = styled.ul`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const LinkWrapper = styled.ul`\n  margin-bottom: 20px;\n`;\n\nexport const LinkItem = styled.li`\n  font-weight: 600;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport {\n  Wrapper,\n  WrapperInfo,\n  GenresList,\n  LinkItem,\n  LinkWrapper,\n} from './MovieInfo.styled';\nimport posterDefault from 'images/posterDefault.jpg';\n\nconst MovieInfo = ({ movie }) => {\n  const { original_title, poster_path, vote_average, overview, genres } = movie;\n\n  return (\n    <>\n      <Wrapper>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : posterDefault\n          }\n          alt=\"poster\"\n          width={300}\n          height={450}\n        />\n        <WrapperInfo>\n          <h1>{original_title}</h1>\n          <p>Rating: {Math.round(vote_average * 10)}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <GenresList>\n            {genres.map(({ name, id }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </GenresList>\n        </WrapperInfo>\n      </Wrapper>\n      <LinkWrapper>\n        <LinkItem>\n          <Link to=\"cast\">Cast</Link>\n        </LinkItem>\n        <LinkItem>\n          <Link to=\"reviews\">Reviews</Link>\n        </LinkItem>\n      </LinkWrapper>\n    </>\n  );\n};\n\nexport default MovieInfo;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovies } from 'services/movieApi';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport { StyledLink } from './MovieDetails.styled';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport Loader from 'components/Loader/Loader';\nimport toast from 'react-hot-toast';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLinkRef = useRef(location?.state?.from ?? '/');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const controller = new AbortController();\n\n    const getMovieByID = async () => {\n      try {\n        const movie = await getMovies(`/movie/${movieId}`, controller);\n        setMovie(movie);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          toast.error('Ooops... Something went wrong.');\n        }\n      }\n    };\n\n    getMovieByID();\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      <StyledLink to={backLinkRef.current}>\n        <AiOutlineArrowLeft />\n        Go back\n      </StyledLink>\n      {movie && <MovieInfo movie={movie} />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNWE2YjI4NDE4NjQ2MzJjM2IxNWU2ZDRlODMyMDY0ZCIsInN1YiI6IjY1MjdhMWUxY2I2ZGI1MDBhZGJlYjZlYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.5Y4zTyHAohqZ-iIa2fc9-B-O64-kHEDM1rctk5tnotg';\n\nexport const getMovies = async (path, controller) => {\n  const response = await axios.get(path, {\n    signal: controller.signal,\n  });\n  return response.data;\n};\n"],"names":["StyledLink","styled","Link","Wrapper","WrapperInfo","GenresList","LinkWrapper","LinkItem","movie","original_title","poster_path","vote_average","overview","genres","src","posterDefault","alt","width","height","Math","round","map","name","id","to","useState","setMovie","location","useLocation","backLinkRef","useRef","state","from","movieId","useParams","useEffect","controller","AbortController","getMovieByID","getMovies","code","toast","abort","current","Suspense","fallback","Loader","axios","path","signal","response","data"],"sourceRoot":""}